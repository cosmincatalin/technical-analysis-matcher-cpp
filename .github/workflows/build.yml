name: Build

on:
    push:
    pull_request:

env:
    BUILD_TYPE: Release

jobs:
    build:
        name: ${{ matrix.config.name }}
        runs-on: ${{ matrix.config.os }}
        strategy:
            fail-fast: true
            matrix:
                config:
                    # -   {
                    #         name: "Windows Latest MSVC", artifact: "Windows-MSVC.tar.xz",
                    #         os: windows-latest,
                    #         build_type: "Release", cc: "cl", cxx: "cl",
                    #         environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
                    #     }
                    # -   {
                    #         name: "Windows Latest MinGW", artifact: "Windows-MinGW.tar.xz",
                    #         os: windows-latest,
                    #         build_type: "Release", cc: "gcc", cxx: "g++"
                    #     }
                    -   {
                            name: "Ubuntu Latest GCC", artifact: "Linux.tar.xz",
                            os: ubuntu-latest,
                            build_type: "Release", cc: "gcc", cxx: "g++"
                        }
                    # -   {
                    #         name: "macOS Latest Clang", artifact: "macOS.tar.xz",
                    #         os: macos-latest,
                    #         build_type: "Release", cc: "clang", cxx: "clang++"
                    #     }
        steps:
            -   uses: actions/checkout@v3

            -   uses: lukka/get-cmake@latest
                name: Install CMake and Ninja

            -   name: Restore artifacts, or setup vcpkg (do not install any package)
                uses: lukka/run-vcpkg@latest
                with:
                    vcpkgGitCommitId: 6ca56aeb457f033d344a7106cb3f9f1abf8f4e98

            -   name: Run CMake consuming CMakePreset.json and vcpkg.json by mean of vcpkg.
                uses: lukka/run-cmake@latest
                with:
                    configurePreset: 'ninja-multi-vcpkg'
                    buildPreset: 'ninja-multi-vcpkg'

            -   name: Install Strip
                run: cmake --install build --prefix instdir --strip

            -   name: Pack
                working-directory: instdir
                run: cmake -E tar cfv ../${{ matrix.config.artifact }} --format=7zip .

            -   name: Upload
                uses: actions/upload-artifact@v2
                with:
                    path: ./${{ matrix.config.artifact }}
                    name: ${{ matrix.config.artifact }}
#   release:
#     if: contains(github.ref, 'tags/v')
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#     - name: Create Release
#       id: create_release
#       uses: actions/create-release@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         tag_name: ${{ github.ref }}
#         release_name: Release ${{ github.ref }}
#         draft: false
#         prerelease: false

#     - name: Store Release url
#       run: |
#         echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url
#     - uses: actions/upload-artifact@v2
#       with:
#         path: ./upload_url
#         name: upload_url

#   publish:
#     if: contains(github.ref, 'tags/v')
#     name: ${{ matrix.config.name }}
#     runs-on: ${{ matrix.config.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         config:
#         - {
#             name: "Windows Latest MSVC", artifact: "Windows-MSVC.7z",
#             os: ubuntu-latest
#           }
#         - {
#             name: "Windows Latest MinGW", artifact: "Windows-MinGW.7z",
#             os: ubuntu-latest
#           }
#         - {
#             name: "Ubuntu Latest GCC", artifact: "Linux.7z",
#             os: ubuntu-latest
#           }
#         - {
#             name: "macOS Latest Clang", artifact: "macOS.7z",
#             os: ubuntu-latest
#           }
#     needs: release

#     steps:
#     - name: Download artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ${{ matrix.config.artifact }}
#         path: ./

#     - name: Download URL
#       uses: actions/download-artifact@v2
#       with:
#         name: upload_url
#         path: ./
#     - id: set_upload_url
#       run: |
#         upload_url=`cat ./upload_url`
#         echo ::set-output name=upload_url::$upload_url
#     - name: Upload to Release
#       id: upload_to_release
#       uses: actions/upload-release-asset@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
#         asset_path: ./${{ matrix.config.artifact }}
#         asset_name: ${{ matrix.config.artifact }}
#         asset_content_type: application/x-gtar