name: Build

on:
    push:
    pull_request:

env:
    BUILD_TYPE: Release

jobs:
    build:
        name: ${{ matrix.config.name }}
        runs-on: ${{ matrix.config.os }}
        strategy:
            fail-fast: true
            matrix:
                config:
                    -   {
                            name: "Windows Latest MSVC", artifact: "Windows-MSVC.tar.xz",
                            os: windows-latest,
                            build_type: "Release", cc: "cl", cxx: "cl",
                            environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat"
                        }
                    -   {
                            name: "Windows Latest MinGW", artifact: "Windows-MinGW.tar.xz",
                            os: windows-latest,
                            build_type: "Release", cc: "gcc", cxx: "g++"
                        }
                    -   {
                            name: "Ubuntu Latest GCC", artifact: "Linux.tar.xz",
                            os: ubuntu-latest,
                            build_type: "Release", cc: "gcc", cxx: "g++"
                        }
                    -   {
                            name: "macOS Latest Clang", artifact: "macOS.tar.xz",
                            os: macos-latest,
                            build_type: "Release", cc: "clang", cxx: "clang++"
                        }
        steps:
            -   uses: actions/checkout@v3

            -   uses: actions/checkout@v3
                name: Download dbg-macro
                with:
                    repository: 'sharkdp/dbg-macro'
                    path: 'dbg-macro'
            -   name: Install dbg-macro
                run: sudo ln -s $(readlink -f dbg-macro/dbg.h) /usr/include/dbg.h

            -   uses: seanmiddleditch/gha-setup-ninja@master
                name: Install Ninja

            -   uses: jwlawson/actions-setup-cmake@v1.12
                name: Install Cmake

            -   name: Configure
                shell: cmake -P {0}
                run: |
                    set(ENV{CC} ${{ matrix.config.cc }})
                    set(ENV{CXX} ${{ matrix.config.cxx }})
                    if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
                        execute_process(
                            COMMAND "${{ matrix.config.environment_script }}" && set
                            OUTPUT_FILE environment_script_output.txt
                        )
                        file(STRINGS environment_script_output.txt output_lines)
                        foreach(line IN LISTS output_lines)
                            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
                            endif()
                        endforeach()
                    endif()
                    set(path_separator ":")
                    if ("${{ runner.os }}" STREQUAL "Windows")
                        set(path_separator ";")
                    endif()
                    set(ENV{PATH} "$ENV{GITHUB_WORKSPACE}${path_separator}$ENV{PATH}")
                    execute_process(
                        COMMAND cmake
                        -S .
                        -B build
                        -D CMAKE_BUILD_TYPE=$ENV{BUILD_TYPE}
                        -G Ninja
                        -D CMAKE_MAKE_PROGRAM=ninja
                        RESULT_VARIABLE result
                    )
                    if (NOT result EQUAL 0)
                        message(FATAL_ERROR "Bad exit status")
                    endif()
            -   name: Build
                shell: cmake -P {0}
                run: |
                    set(ENV{NINJA_STATUS} "[%f/%t %o/sec] ")
                    if ("${{ runner.os }}" STREQUAL "Windows" AND NOT "x${{ matrix.config.environment_script }}" STREQUAL "x")
                        file(STRINGS environment_script_output.txt output_lines)
                        foreach(line IN LISTS output_lines)
                            if (line MATCHES "^([a-zA-Z0-9_-]+)=(.*)$")
                                set(ENV{${CMAKE_MATCH_1}} "${CMAKE_MATCH_2}")
                            endif()
                        endforeach()
                    endif()
                    execute_process(
                        COMMAND cmake --build build
                        RESULT_VARIABLE result
                        OUTPUT_VARIABLE output
                        ERROR_VARIABLE output
                        ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
                    )
                    if (NOT result EQUAL 0)
                        string(REGEX MATCH "FAILED:.*$" error_message "${output}")
                        string(REPLACE "\n" "%0A" error_message "${error_message}")
                        message("::error::${error_message}")
                        message(FATAL_ERROR "Build failed")
                    endif()
            -   name: Run tests
                shell: cmake -P {0}
                run: |
                    include(ProcessorCount)
                    ProcessorCount(N)
                    set(ENV{CTEST_OUTPUT_ON_FAILURE} "ON")
                    execute_process(
                        COMMAND ctest -j ${N}
                        WORKING_DIRECTORY build
                        RESULT_VARIABLE result
                        OUTPUT_VARIABLE output
                        ERROR_VARIABLE output
                        ECHO_OUTPUT_VARIABLE ECHO_ERROR_VARIABLE
                    )
                    if (NOT result EQUAL 0)
                        string(REGEX MATCH "[0-9]+% tests.*[0-9.]+ sec.*$" test_results "${output}")
                        string(REPLACE "\n" "%0A" test_results "${test_results}")
                        message("::error::${test_results}")
                        message(FATAL_ERROR "Running tests failed!")
                    endif()
            -   name: Install Strip
                run: cmake --install build --prefix instdir --strip
            -   name: Pack
                working-directory: instdir
                run: cmake -E tar cfv ../${{ matrix.config.artifact }} --format=7zip .
            -   name: Upload
                uses: actions/upload-artifact@v2
                with:
                    path: ./${{ matrix.config.artifact }}
                    name: ${{ matrix.config.artifact }}
#   release:
#     if: contains(github.ref, 'tags/v')
#     runs-on: ubuntu-latest
#     needs: build

#     steps:
#     - name: Create Release
#       id: create_release
#       uses: actions/create-release@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         tag_name: ${{ github.ref }}
#         release_name: Release ${{ github.ref }}
#         draft: false
#         prerelease: false

#     - name: Store Release url
#       run: |
#         echo "${{ steps.create_release.outputs.upload_url }}" > ./upload_url
#     - uses: actions/upload-artifact@v2
#       with:
#         path: ./upload_url
#         name: upload_url

#   publish:
#     if: contains(github.ref, 'tags/v')
#     name: ${{ matrix.config.name }}
#     runs-on: ${{ matrix.config.os }}
#     strategy:
#       fail-fast: false
#       matrix:
#         config:
#         - {
#             name: "Windows Latest MSVC", artifact: "Windows-MSVC.7z",
#             os: ubuntu-latest
#           }
#         - {
#             name: "Windows Latest MinGW", artifact: "Windows-MinGW.7z",
#             os: ubuntu-latest
#           }
#         - {
#             name: "Ubuntu Latest GCC", artifact: "Linux.7z",
#             os: ubuntu-latest
#           }
#         - {
#             name: "macOS Latest Clang", artifact: "macOS.7z",
#             os: ubuntu-latest
#           }
#     needs: release

#     steps:
#     - name: Download artifact
#       uses: actions/download-artifact@v2
#       with:
#         name: ${{ matrix.config.artifact }}
#         path: ./

#     - name: Download URL
#       uses: actions/download-artifact@v2
#       with:
#         name: upload_url
#         path: ./
#     - id: set_upload_url
#       run: |
#         upload_url=`cat ./upload_url`
#         echo ::set-output name=upload_url::$upload_url
#     - name: Upload to Release
#       id: upload_to_release
#       uses: actions/upload-release-asset@v1
#       env:
#         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#       with:
#         upload_url: ${{ steps.set_upload_url.outputs.upload_url }}
#         asset_path: ./${{ matrix.config.artifact }}
#         asset_name: ${{ matrix.config.artifact }}
#         asset_content_type: application/x-gtar